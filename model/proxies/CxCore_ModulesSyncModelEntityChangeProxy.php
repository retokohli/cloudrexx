<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCore_ModulesSyncModelEntityChangeProxy extends \Cx\Core_Modules\Sync\Model\Entity\Change implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setId($id)
    {
        $this->_load();
        return parent::setId($id);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setSync($sync)
    {
        $this->_load();
        return parent::setSync($sync);
    }

    public function getSync()
    {
        $this->_load();
        return parent::getSync();
    }

    public function setHost($host)
    {
        $this->_load();
        return parent::setHost($host);
    }

    public function getHost()
    {
        $this->_load();
        return parent::getHost();
    }

    public function setStatus($status)
    {
        $this->_load();
        return parent::setStatus($status);
    }

    public function getStatus()
    {
        $this->_load();
        return parent::getStatus();
    }

    public function setEventType($eventType)
    {
        $this->_load();
        return parent::setEventType($eventType);
    }

    public function getEventType()
    {
        $this->_load();
        return parent::getEventType();
    }

    public function setEntityIndexData($entityIndexData)
    {
        $this->_load();
        return parent::setEntityIndexData($entityIndexData);
    }

    public function getEntityIndexData()
    {
        $this->_load();
        return parent::getEntityIndexData();
    }

    public function setEntityIdentifier($entityIdentifier)
    {
        $this->_load();
        return parent::setEntityIdentifier($entityIdentifier);
    }

    public function getEntityIdentifier()
    {
        $this->_load();
        return parent::getEntityIdentifier();
    }

    public function setEntity($entity)
    {
        $this->_load();
        return parent::setEntity($entity);
    }

    public function getEntity()
    {
        $this->_load();
        return parent::getEntity();
    }

    public function setContents($contents)
    {
        $this->_load();
        return parent::setContents($contents);
    }

    public function getContents()
    {
        $this->_load();
        return parent::getContents();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'status', 'eventType', 'entityIndexData', 'entityIdentifier', 'contents', 'sync', 'host');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}