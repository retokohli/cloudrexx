<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxModulesCalendarModelEntityRegistrationFormFieldProxy extends \Cx\Modules\Calendar\Model\Entity\RegistrationFormField implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setType($type)
    {
        $this->_load();
        return parent::setType($type);
    }

    public function getType()
    {
        $this->_load();
        return parent::getType();
    }

    public function setRequired($required)
    {
        $this->_load();
        return parent::setRequired($required);
    }

    public function getRequired()
    {
        $this->_load();
        return parent::getRequired();
    }

    public function setOrder($order)
    {
        $this->_load();
        return parent::setOrder($order);
    }

    public function getOrder()
    {
        $this->_load();
        return parent::getOrder();
    }

    public function setAffiliation($affiliation)
    {
        $this->_load();
        return parent::setAffiliation($affiliation);
    }

    public function getAffiliation()
    {
        $this->_load();
        return parent::getAffiliation();
    }

    public function addRegistrationFormFieldName(\Cx\Modules\Calendar\Model\Entity\RegistrationFormFieldName $registrationFormFieldName)
    {
        $this->_load();
        return parent::addRegistrationFormFieldName($registrationFormFieldName);
    }

    public function setRegistrationFormFieldNames($registrationFormFieldNames)
    {
        $this->_load();
        return parent::setRegistrationFormFieldNames($registrationFormFieldNames);
    }

    public function getRegistrationFormFieldNames()
    {
        $this->_load();
        return parent::getRegistrationFormFieldNames();
    }

    public function getRegistrationFormFieldNamesByLangId($langId)
    {
        $this->_load();
        return parent::getRegistrationFormFieldNamesByLangId($langId);
    }

    public function addRegistrationFormFieldValue(\Cx\Modules\Calendar\Model\Entity\RegistrationFormFieldValue $registrationFormFieldValue)
    {
        $this->_load();
        return parent::addRegistrationFormFieldValue($registrationFormFieldValue);
    }

    public function setRegistrationFormFieldValues($registrationFormFieldValues)
    {
        $this->_load();
        return parent::setRegistrationFormFieldValues($registrationFormFieldValues);
    }

    public function getRegistrationFormFieldValues()
    {
        $this->_load();
        return parent::getRegistrationFormFieldValues();
    }

    public function setRegistrationForm(\Cx\Modules\Calendar\Model\Entity\RegistrationForm $registrationForm)
    {
        $this->_load();
        return parent::setRegistrationForm($registrationForm);
    }

    public function getRegistrationForm()
    {
        $this->_load();
        return parent::getRegistrationForm();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'id', 'type', 'required', 'order', 'affiliation', 'registrationFormFieldNames', 'registrationFormFieldValues', 'registrationForm');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}