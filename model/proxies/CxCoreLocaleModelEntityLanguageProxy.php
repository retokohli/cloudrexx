<?php

namespace Cx\Model\Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class CxCoreLocaleModelEntityLanguageProxy extends \Cx\Core\Locale\Model\Entity\Language implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    private function _load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }

    
    public function setId($iso1)
    {
        $this->_load();
        return parent::setId($iso1);
    }

    public function getId()
    {
        $this->_load();
        return parent::getId();
    }

    public function setIso1($iso1)
    {
        $this->_load();
        return parent::setIso1($iso1);
    }

    public function getIso1()
    {
        $this->_load();
        return parent::getIso1();
    }

    public function setIso3($iso3 = NULL)
    {
        $this->_load();
        return parent::setIso3($iso3);
    }

    public function getIso3()
    {
        $this->_load();
        return parent::getIso3();
    }

    public function setSource($source)
    {
        $this->_load();
        return parent::setSource($source);
    }

    public function getSource()
    {
        $this->_load();
        return parent::getSource();
    }

    public function setBackend(\Cx\Core\Locale\Model\Entity\Backend $backend)
    {
        $this->_load();
        return parent::setBackend($backend);
    }

    public function getBackend()
    {
        $this->_load();
        return parent::getBackend();
    }

    public function addFrontends(\Cx\Core\View\Model\Entity\Frontend $frontends)
    {
        $this->_load();
        return parent::addFrontends($frontends);
    }

    public function getFrontends()
    {
        $this->_load();
        return parent::getFrontends();
    }

    public function addLocaleRelatedBySourceLanguages(\Cx\Core\Locale\Model\Entity\Locale $localeRelatedBySourceLanguages)
    {
        $this->_load();
        return parent::addLocaleRelatedBySourceLanguages($localeRelatedBySourceLanguages);
    }

    public function getLocaleRelatedBySourceLanguages()
    {
        $this->_load();
        return parent::getLocaleRelatedBySourceLanguages();
    }

    public function addLocaleRelatedByIso1s(\Cx\Core\Locale\Model\Entity\Locale $localeRelatedByIso1s)
    {
        $this->_load();
        return parent::addLocaleRelatedByIso1s($localeRelatedByIso1s);
    }

    public function getLocaleRelatedByIso1s()
    {
        $this->_load();
        return parent::getLocaleRelatedByIso1s();
    }

    public function __get($name)
    {
        $this->_load();
        return parent::__get($name);
    }

    public function getComponentController()
    {
        $this->_load();
        return parent::getComponentController();
    }

    public function setVirtual($virtual)
    {
        $this->_load();
        return parent::setVirtual($virtual);
    }

    public function isVirtual()
    {
        $this->_load();
        return parent::isVirtual();
    }

    public function validate()
    {
        $this->_load();
        return parent::validate();
    }

    public function __toString()
    {
        $this->_load();
        return parent::__toString();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'iso1', 'iso3', 'source', 'backend', 'frontends', 'localeRelatedBySourceLanguages', 'localeRelatedByIso1s');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}