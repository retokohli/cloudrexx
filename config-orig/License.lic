{
    "license":{
        "state":"OK",
        "edition":"OpenSource",
        "validTo":2733517333,
        "createdAt":1408051333,
        "key":"OpenSourceKey4ddd08c0115f967d5ca4c85abb2",
        "installationId":"OpenSourceId4ddd08c0115f967d5ca40af9e839",
        "availableComponents":{
            "Comvation AG":[
                "Access",
                "Agb",
                "Alias",
                "Auction",
                "Block",
                "Blog",
                "Cache",
                "CacheManager",
                "Calendar",
                "Captcha",
                "Checkout",
                "ComponentManager",
                "Config",
                "Contact",
                "ContentManager",
                "ContentWorkflow",
                "Core",
                "Crm",
                "Cron",
                "Csrf",
                "Data",
                "DatabaseManager",
                "Directory",
                "Docsys",
                "Downloads",
                "Ecard",
                "Egov",
                "Error",
                "Feed",
                "FileBrowser",
                "Filesharing",
                "Forum",
                "FrontendEditing",
                "Fulllanguage",
                "Gallery",
                "Guestbook",
                "Home",
                "Hotel",
                "Ids",
                "Immo",
                "Imprint",
                "JavaScript",
                "Jsondata",
                "Jobs",
                "Knowledge",
                "Language",
                "LanguageManager",
                "License",
                "LicenseManager",
                "LinkManager",
                "Livecam",
                "Login",
                "Logout",
                "Market",
                "Media",
                "Media1",
                "Media2",
                "Media3",
                "Media4",
                "MediaBrowser",
                "Mediadir",
                "Memberdir",
                "Message",
                "MultiSite",
                "Net",
                "NetManager",
                "Nettools",
                "News",
                "Newsletter",
                "Noaccess",
                "Order",
                "Partners",
                "Pim",
                "Podcast",
                "Privacy",
                "Recommend",
                "Routing",
                "Search",
                "Security",
                "Sitemap",
                "Stats",
                "Support",
                "Survey",
                "SysLog",
                "SystemInfo",
                "SystemLog",
                "Session",
                "Shell",
                "Shop",
                "Test",
                "U2u",
                "Uploader",
                "Upload",
                "User",
                "ViewManager",
                "Voting",
                "Workbench",
                "Wysiwyg"
            ]
        },
        "legalComponents":[
            "Access",
            "Agb",
            "Alias",
            "Auction",
            "Block",
            "Blog",
            "Cache",
            "CacheManager",
            "Calendar",
            "Captcha",
            "Checkout",
            "ComponentManager",
            "Config",
            "Contact",
            "ContentManager",
            "ContentWorkflow",
            "Core",
            "Crm",
            "Cron",
            "Csrf",
            "Data",
            "DatabaseManager",
            "DateTime",
            "Directory",
            "Docsys",
            "Downloads",
            "Ecard",
            "Egov",
            "Error",
            "Feed",
            "FileBrowser",
            "Filesharing",
            "Forum",
            "FrontendEditing",
            "Fulllanguage",
            "Gallery",
            "GeoIp",
            "Guestbook",
            "Home",
            "Hotel",
            "Html",
            "Ids",
            "Immo",
            "Imprint",
            "JavaScript",
            "Jsondata",
            "Jobs",
            "Knowledge",
            "Language",
            "LanguageManager",
            "License",
            "LicenseManager",
            "LinkManager",
            "Livecam",
            "Login",
            "Logout",
            "Market",
            "Media",
            "Media1",
            "Media2",
            "Media3",
            "Media4",
            "MediaBrowser",
            "Mediadir",
            "MediaSource",
            "Memberdir",
            "Message",
            "MultiSite",
            "Net",
            "NetManager",
            "Nettools",
            "News",
            "Newsletter",
            "Noaccess",
            "Order",
            "Partners",
            "Pim",
            "Podcast",
            "Privacy",
            "Recommend",
            "Routing",
            "Search",
            "Security",
            "Sitemap",
            "Stats",
            "Support",
            "Survey",
            "SysLog",
            "SystemInfo",
            "SystemLog",
            "Session",
            "Shell",
            "Shop",
            "Test",
            "U2u",
            "Uploader",
            "Upload",
            "User",
            "ViewManager",
            "Voting",
            "Workbench",
            "Wysiwyg"
        ],
        "upgradeUrl":"http:\/\/license.contrexx.com\/",
        "isUpgradable":false,
        "registeredDomains":[
            "*"
        ],"messages":{
            "dashboard":{
                "de":{
                    "text":"",
                    "type":"warningbox",
                    "link":"index.php?cmd=license",
                    "linkTarget":"_self",
                    "showInDashboard":true
                }
            },
            "licenseManagement":{
                "de":{
                    "text":"",
                    "type":"warningbox",
                    "link":"http:\/\/license.contrexx.com\/",
                    "linkTarget":"_blank",
                    "showInDashboard":true
                }
            },
            "grayZone":{
                "de":{
                    "text":"Beim Aktualisieren der Lizenzdaten ist ein Fehler aufgetreten. Bitte wenden Sie sich an Ihren Webmaster.",
                    "type":"alertbox",
                    "link":"index.php?cmd=license",
                    "linkTarget":"_self",
                    "showInDashboard":true
                }
            },
            "de":{
                "text":"",
                "type":"warningbox",
                "link":"index.php?cmd=license",
                "linkTarget":"_self",
                "showInDashboard":true
            }
        },
        "partner":{
            "companyName":"Comvation AG",
            "title":"Mr.",
            "firstname":"Hans",
            "lastname":"Muster",
            "address":"Burgstrasse 20",
            "zip":"3600",
            "city":"Thun",
            "country":"Switzerland",
            "phone":"+41 (0)33 226 6000",
            "url":"http:\/\/www.comvation.com\/",
            "upgradeUrl":null,
            "mail":"info@comvation.com"
        },
        "customer":{
            "companyName":"Comvation AG",
            "title":"Mr.",
            "firstname":"Hans",
            "lastname":"Muster",
            "address":"Burgstrasse 20",
            "zip":"3600",
            "city":"Thun",
            "country":"Switzerland",
            "phone":"+41 (0)33 226 6000",
            "url":"http:\/\/www.comvation.com\/",
            "mail":"info@comvation.com"
        },
        "settings":{
            "requestInterval":8760,
            "grayZoneTime":8760,
            "frontendLockTime":"false",
            "grayZoneMessages":{
                "de":{
                    "text":"Beim Aktualisieren der Lizenzdaten ist ein Fehler aufgetreten. Bitte wenden Sie sich an Ihren Webmaster.",
                    "type":"alertbox",
                    "link":"index.php?cmd=license",
                    "linkTarget":"_self",
                    "showInDashboard":true
                }
            }
        }
    },
    "versions":{
        "currentStable":{
            "number":"4.0",
            "name":"Contrexx",
            "codeName":"Cloudy with a chance of...",
            "state":"beta",
            "releaseDate":1408051333
        }
    },
    "common":{
        "legacy":"NVERSION=2.2.6",
        "template":"\n<div id=\"jsstatemessage\" style=\"display:none;\"><\/div>\n<!-- BEGIN status -->\n<div class=\"{STATUS_TYPE}\">{STATUS_MESSAGE}<\/div>\n<!-- END status -->\n<!-- BEGIN message -->\n<div id=\"license_message\" class=\"upgrade {MESSAGE_TYPE}\">\n    <a class=\"link\" href=\"{MESSAGE_LINK}\" target=\"{MESSAGE_LINK_TARGET}\">{MESSAGE_TITLE}<\/a>\n    <!-- BEGIN upgradable -->\n    <a id=\"button_upgrade\" href=\"{LICENSE_UPGRADE_URL}\">Upgrade<\/a>\n    <!-- END upgradable -->\n<\/div>\n<!-- END message -->\n\n<script type=\"text\/javascript\">\n\n    \n    cx.license = new function() {\n        \n        return {\n            crc32: function(s) {\n                s = String(s);\n                var c=0, i=0, j=0;\n                var polynomial = arguments.length < 2 ? 0x04C11DB7 : arguments[1],\n                    initialValue = arguments.length < 3 ? 0xFFFFFFFF : arguments[2],\n                    finalXORValue = arguments.length < 4 ? 0xFFFFFFFF : arguments[3],\n                    crc = initialValue,\n                    table = [], i, j, c;\n\n                function reverse(x, n) {\n                    var b = 0;\n                    while (n) {\n                    b = b * 2 + x % 2;\n                    x \/= 2;\n                    x -= x % 1;\n                    n--;\n                    }\n                    return b;\n                }\n\n                var range = 255, c=0;\n                for (i = 0; i < s.length; i++){\n                    c = s.charCodeAt(i);\n                    if(c>range){ range=c; }\n                }\n\n                for (i = range; i >= 0; i--) {\n                    c = reverse(i, 32);\n\n                    for (j = 0; j < 8; j++) {\n                    c = ((c * 2) ^ (((c >>> 31) % 2) * polynomial)) >>> 0;\n                    }\n\n                    table[i] = reverse(c, 32);\n                }\n\n                for (i = 0; i < s.length; i++) {\n                    c = s.charCodeAt(i);\n                    if (c > range) {\n                    throw new RangeError();\n                    }\n                    j = (crc % 256) ^ c;\n                    crc = ((crc \/ 256) ^ table[j]) >>> 0;\n                }\n\n                return (crc ^ finalXORValue) >>> 0;\n            },\n            strPad: function(i,l,s) {\n                var o = i.toString();\n                if (!s) { s = \"0\"; }\n                while (o.length < l) {\n                    o = s + o;\n                }\n                return o;\n            },\n            checkKey: function(key, id) {\n                if (key === id) {\n                    return false;\n                }\n                if (key.length != 40) {\n                    return false;\n                }\n                var realKey = key.substr(0, 40 - 8);\n                var realChecksum = this.strPad(this.crc32(realKey).toString(16), 8);\n                return realKey + realChecksum === key;\n            },\n            appendIcon: function(element, id) {\n                if (this.checkKey(element.val(), id)) {\n                    element.parent().children(\"img\").remove();\n                    element.after(\" <img src=\\\"..\/core\/Core\/View\/Media\/icons\/check.gif\\\" \/>\");\n                    jQuery(\"input[name=save]\").attr(\"disabled\", false);\n                } else {\n                    element.parent().children(\"img\").remove();\n                    element.after(\" <img src=\\\"..\/core\/Core\/View\/Media\/icons\/delete.gif\\\" \/>\");\n                    jQuery(\"input[name=save]\").attr(\"disabled\", true);\n                }\n            }\n        };\n    }();\n\n    jQuery(\"document\").ready(function() {\n        var selector = \"input[name=licenseKey]\";\n        var id = jQuery(\"#installationId\").html();\n        \n        cx.license.appendIcon(jQuery(selector), id);\n        \n        jQuery(selector).keyup(function() {\n            cx.license.appendIcon(jQuery(this), id);\n        });\n        \n        var edition = jQuery(\"#edition\").html();\n        if (edition == \"Free\" || edition == \"Trial\") {\n            jQuery(\"#upgradeButton\").show();\n        }\n    });\n<\/script>\n<form method=\"post\" action=\"index.php?cmd=license\">\n    <table class=\"adminlist\" width=\"100%\">\n        <tr>\n            <th width=\"15%\">{TXT_LICENSE_OVERVIEW}<\/th>\n            <th width=\"85%\"><\/th>\n        <\/tr>\n        <tr>\n            <td>{TXT_LICENSE_STATE}<\/td>\n            <td>{LICENSE_STATE}<\/td>\n        <\/tr>\n        <tr>\n            <td>Version<\/td>\n            <td>{VERSION_NUMBER}<\/td>\n        <\/tr>\n        <tr>\n            <td>{TXT_LICENSE_EDITION}<\/td>\n            <td id=\"edition\">{LICENSE_EDITION}<\/td>\n        <\/tr>\n        <tr>\n            <td>{TXT_LICENSE_REGISTERED_DOMAINS}<\/td>\n            <td>\n<!-- BEGIN licenseDomain -->\n                <div>{LICENSE_DOMAIN}<\/div>\n<!-- END licenseDomain -->\n            <\/td>\n        <\/tr>\n        <tr>\n            <td>{TXT_LICENSE_VALID_TO}<\/td>\n            <td>{LICENSE_VALID_TO}<\/td>\n        <\/tr>\n        <tr>\n            <td>{TXT_LICENSE_CREATED_AT}<\/td>\n            <td>{LICENSE_CREATED_AT}<\/td>\n        <\/tr>\n        <tr>\n            <td>{TXT_INSTALLATION_ID}<\/td>\n            <td id=\"installationId\">{INSTALLATION_ID}<\/td>\n        <\/tr>\n<!-- BEGIN licenseAdmin -->\n        <tr>\n            <td>{TXT_LICENSE_KEY}<\/td>\n            <td><input type=\"text\" value=\"{LICENSE_KEY}\" size=\"50\" name=\"licenseKey\" \/><br \/><input style=\"margin-top: 5px;\" type=\"submit\" name=\"save\" value=\"{TXT_SAVE}\" \/><\/td>\n        <\/tr>\n    <\/table>\n    <br \/>\n    <input type=\"submit\" name=\"update\" value=\"{TXT_LICENSE_UPDATE}\" \/>\n<!-- END licenseAdmin -->\n<!-- BEGIN licenseNotAdmin -->\n        <tr>\n            <td>{TXT_LICENSE_KEY}<\/td>\n            <td>{LICENSE_KEY}<\/td>\n        <\/tr>\n    <\/table>\n<!-- END licenseNotAdmin -->\n<\/form>",
        "v_theirs":"4.0",
        "debug":""
    }
}



