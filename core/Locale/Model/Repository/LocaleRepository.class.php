<?php

/**
 * Cloudrexx
 *
 * @link      http://www.cloudrexx.com
 * @copyright Cloudrexx AG 2007-2016
 *
 * According to our dual licensing model, this program can be used either
 * under the terms of the GNU Affero General Public License, version 3,
 * or under a proprietary license.
 *
 * The texts of the GNU Affero General Public License with an additional
 * permission and of our proprietary license can be found at and
 * in the LICENSE file you have received along with this program.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * "Cloudrexx" is a registered trademark of Cloudrexx AG.
 * The licensing of the program under the AGPLv3 does not imply a
 * trademark license. Therefore any rights, title and interest in
 * our trademarks remain entirely with us.
 */

/**
 * LocaleRepository
 *
 * @copyright   Cloudrexx AG
 * @author      Nicola Tommasi <nicola.tommasi@comvation.com>
 * @package     cloudrexx
 * @subpackage  core_locale
 * @version     5.0.0
 */

namespace Cx\Core\Locale\Model\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * LocaleRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 *
 * @copyright   Cloudrexx AG
 * @author      Nicola Tommasi <nicola.tommasi@comvation.com>
 * @package     cloudrexx
 * @subpackage  core_locale
 * @version     5.0.0
 */
class LocaleRepository extends EntityRepository
{
    /**
     * Finds all locale entities and orders them by their orderNo
     * @todo: After doctrine update, use findBy instead of the queryBuilder
     * @return array The locales
     */
    public function findAll()
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('l')
            ->from('\Cx\Core\Locale\Model\Entity\Locale', 'l')
            ->orderBy('l.orderNo', 'ASC');
        $query = $qb->getQuery();
        return $query->getResult();
    }

    /**
     * Finds all locales according to the criteria
     * and orders them by their orderNo
     *
     * @todo: After doctrine update, use second param of findBy for ordering
     * @param array $criteria The criteria
     * @return array The locales
     */
    public function findBy(
        array $criteria, array $orderBy = NULL, $limit = NULL, $offset = NULL
    ) {
        $locales = parent::findBy($criteria);
        // order locales by orderNo
        usort($locales, function($a, $b) {
           return $a->getOrderNo() - $b->getOrderNo();
        });
        return $locales;
    }

    /**
     * Finds a locale by it's code/short form (e.g de, de-CH, etc.)
     * @param string $code The locale code/short form
     * @return null|\Cx\Core\Locale\Model\Entity\Locale The locale object
     */
    public function findOneByCode($code) {
        $matches = null;
        if (
            !preg_match(
                '/^([a-z]{1,2})(?:-([A-Z]{2,4})|())$/',
                $code,
                $matches
            )
        ) {
            return null;
        }
        $cx = \Cx\Core\Core\Controller\Cx::instanciate();
        $em = $cx->getDb()->getEntityManager();
        $qb = $em->createQueryBuilder();
        $qb->select('l')->from('Cx\Core\Locale\Model\Entity\Locale', 'l');
        $qb->andWhere($qb->expr()->eq('l.iso1', '?1'));
        $qb->setParameter(1, $matches[1]);
        if (empty($matches[2])) {
            $qb->andWhere($qb->expr()->isNull('l.country'));
        } else {
            $qb->andWhere($qb->expr()->eq('l.country', '?2'));
            $qb->setParameter(2, $matches[2]);
        }
        return $qb->getQuery()->getSingleResult();
    }
}
