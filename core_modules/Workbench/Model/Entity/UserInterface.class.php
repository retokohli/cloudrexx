<?php

/**
 * Cloudrexx
 *
 * @link      http://www.cloudrexx.com
 * @copyright Cloudrexx AG 2007-2015
 *
 * According to our dual licensing model, this program can be used either
 * under the terms of the GNU Affero General Public License, version 3,
 * or under a proprietary license.
 *
 * The texts of the GNU Affero General Public License with an additional
 * permission and of our proprietary license can be found at and
 * in the LICENSE file you have received along with this program.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU Affero General Public License for more details.
 *
 * "Cloudrexx" is a registered trademark of Cloudrexx AG.
 * The licensing of the program under the AGPLv3 does not imply a
 * trademark license. Therefore any rights, title and interest in
 * our trademarks remain entirely with us.
 */

/**
 * Abstract class for user interfaces
 * @author Michael Ritter <michael.ritter@comvation.com>
 */

namespace Cx\Core_Modules\Workbench\Model\Entity;

/**
 * Abstract class for user interfaces
 * @author Michael Ritter <michael.ritter@comvation.com>
 */
abstract class UserInterface {
    
    /**
     * Cloudrexx main class instance
     * @var \Cx\Core\Core\Controller\Cx
     */
    protected $cx = null;
    
    /**
     * List of commands
     * @var array
     */
    private $commands = array();
    
    /**
     * Workbench instance
     * @var \Cx\Core_Modules\Workbench\Controller\Workbench
     */
    private $workbench = null;
    
    /**
     * If this is true, no output will be generated by commands
     * @var boolean
     */
    protected $silent = false;
    
    /**
     * Initialize this interface
     * 
     * Loads all commands
     * @param \Cx\Core\Core\Controller\Cx $cx Cloudrexx main class
     */
    public function __construct($cx) {
        $this->cx = $cx;
        \Env::get('ClassLoader')->loadFile(ASCMS_CORE_PATH.'/Typing/Model/Entity/AutoBoxedObject.class.php');
        \Env::get('ClassLoader')->loadFile(ASCMS_CORE_PATH.'/Typing/Model/Entity/Primitives.class.php');
        $this->commands = array(
            /* EXISTING COMMANDS */
            'db' => new DbCommand($this), // wrapper for doctrine commandline tools
            'create' => new CreateCommand($this), // create new component
            'test' => new TestCommand($this), // run UnitTests
            'export' => new ExportCommand($this), // Create install/update package of current installation
            
            /* POSSIBLE FUTURE COMMANDS */
            //'move' => new MoveCommand($this), // convert component types (core to core_module, etc.) and rename components
            //'copy' => new CopyCommand($this), // copy components
            //'publish' => new PublishCommand($this), // publish component to cloudrexx app repo (after successful unit testing)
            //'push' => new PushCommand($this), // Pushes this installation to a FTP server
        );
    }
    
    /**
     * Wheter a command exists or not
     * @param string $commandName Name of command
     * @return boolean
     */
    public function commandExists($commandName) {
        return isset($this->commands[$commandName]);
    }

    /**
     * Returns the command with the name supplied (if exists
     * @param string $commandName Name of command to return
     * @return Command Requested command or null
     */
    public function getCommand($commandName) {
        if (!$this->commandExists($commandName)) {
            return null;
        }
        return $this->commands[$commandName];
    }
    
    /**
     * Executes a command
     * @param string $commandName Name of the command to execute
     * @param array $arguments List of arguments for the command
     * @param boolean $silent (optional) Wheter to suppress output or not, default false
     * @return mixed False if command could not be executed or return value of the command 
     */
    public function executeCommand($commandName, $arguments, $silent = false) {
        $cachedSilence = $this->silent;
        $this->silent = $silent;
        $command = $this->getCommand($commandName);
        if (!$command) {
            return false;
        }
        $ret = $command->execute($arguments);
        $this->silent = $cachedSilence;
        return $ret;
    }
    
    /**
     * Returns the list of loaded commands
     * @return array List of Commands
     */
    public function getCommands() {
        return $this->commands;
    }
    
    /**
     * Returns the Workbench instance
     * @return \Cx\Core_Modules\Workbench\Controller\Workbench The Workbench instance
     */
    public function getWorkbench() {
        if (!$this->workbench) {
            $this->workbench = new \Cx\Core_Modules\Workbench\Controller\Workbench();
        }
        return $this->workbench;
    }
    
    /**
     * Returns a variable from workbench config file
     * @param string $name Key for the value to get
     * @return string Configuration value
     */
    public function getConfigVar($name) {
        return $this->getWorkbench()->getConfigEntry($name);
    }
    
    /**
     * Sets a workbench configuration variable
     * @param string $name Key for the value to set
     * @param string $value Value to set
     */
    public function setConfigVar($name, $value) {
        $this->getWorkbench()->setConfigEntry($name, $value);
    }
    
    /**
     * Gives commands access to database object
     * @return \AdoNewConnection Database connection
     */
    public abstract function getDb();
    
    /**
     * Get a user input
     * @param string $description Description to display the user
     * @param string $defaultValue (optional) Value to return if user does not enter anything, default ''
     * @return string User input or default value
     */
    public abstract function input($description, $defaultValue = '');
    
    /**
     * Ask the user a yes/no question, default answer is no
     * @param string $question Question for the user
     * @return boolean True for yes, false otherwise
     */
    public abstract function yesNo($question);
    
    /**
     * Display a message for the user
     * @param string $message Message to display
     */
    public abstract function show($message);
    
    /**
     * Recursively show an array to the user (BETA)
     * 
     * Accepts an array in the form array({something}=>{title}, 'children'=>{recursion})
     * @todo Tested for 2 dimensions only
     * @todo $childrenCount must be an array in order to handle more than 2 dimensions
     * @param array $tree Array to show
     * @param mixed $displayindex Index to display of an entry
     */
    public abstract function tree(array $tree, $displayindex = 0);

    /**
     * Opens a diff view for the user to diff $content1 and $content2
     * @param string $content1 Content to diff with $content2
     * @param string $content2 Content to diff with $content1
     * @param string $tool (optional) Hint which tool to use
     */
    public abstract function diff($content1, $content2, $tool = '');
}
